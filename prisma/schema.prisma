// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "./client"
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "fullTextIndex", "fieldReference", "filteredRelationCount", "metrics", "orderByNulls", "referentialIntegrity", "tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// -------------------- Enums ----------------------

enum conversation_type {
  dm
  group
}

enum activity_type {
  file
  text
  call
  other
}

// ------------------------------------------------

model conversations {
  id   Int               @id @default(autoincrement())
  type conversation_type

  name           String?
  last_active_at DateTime @default(now()) @db.Timestamptz()
  created_at     DateTime @default(now()) @db.Timestamptz()

  members    members[]
  activities activities[]

  @@index([name])
}

model members {
  conversation_id       Int
  user_id               Int
  last_activity_seen_id Int?
  active                Boolean @default(true)

  last_activity_seen activities?   @relation("last_activity_seen", fields: [last_activity_seen_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  conversation       conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activities         activities[]

  @@id([conversation_id, user_id])
}

model activities {
  id              Int           @id @default(autoincrement())
  conversation_id Int
  user_id         Int
  activity_id     Int?
  activity_type   activity_type
  metadata        Json          @db.JsonB
  created_at      DateTime      @db.Timestamptz()

  member       members       @relation(fields: [user_id, conversation_id], references: [user_id, conversation_id], onDelete: Cascade, onUpdate: Cascade)
  conversation conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activity     activities?   @relation("reply", fields: [activity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children     activities[]  @relation("reply")
  attachments  attachments[]
  members_seen members[]     @relation("last_activity_seen")

  @@index([conversation_id, user_id])
}

model mime_types {
  id        Int    @id @default(autoincrement())
  mime_type String @unique
  extension String @unique

  attachments attachments[]
}

model attachments {
  id String @id @default(uuid()) @db.Uuid

  activity_id  Int
  mime_type_id Int

  activity  activities @relation(fields: [activity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mime_type mime_types @relation(fields: [mime_type_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([activity_id])
  @@index([mime_type_id])
}
