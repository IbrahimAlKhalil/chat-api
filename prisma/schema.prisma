// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "./client"
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// -------------------- Enums ----------------------

enum conversation_type {
  dm
  group
}

enum activity_type {
  file
  text
  media
  call
  join
  leave
  other
}

// ------------------------------------------------

model conversations {
  id   Int               @id @default(autoincrement())
  type conversation_type

  name String?

  members    members[]
  activities activities[]

  @@index([name])
}

model members {
  conversation_id Int
  user_id         Int
  last_read       DateTime @db.Timestamptz()
  active          Boolean  @default(true)

  conversation conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([conversation_id, user_id])
}

model activities {
  id              Int           @id @default(autoincrement())
  conversation_id Int
  member_id       Int
  activity_type   activity_type
  metadata        Json          @db.JsonB
  created_at      DateTime      @db.Timestamptz()

  conversation conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attachments  attachments[]

  @@index([conversation_id, member_id])
}

model mime_types {
  id        Int    @id @default(autoincrement())
  mime_type String @unique
  extension String @unique

  attachments attachments[]
}

model attachments {
  id String @id @default(uuid()) @db.Uuid

  activity_id  Int
  mime_type_id Int

  activity   activities @relation(fields: [activity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mime_type mime_types @relation(fields: [mime_type_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([activity_id])
  @@index([mime_type_id])
}
